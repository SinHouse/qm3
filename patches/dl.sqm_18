--- sqm.F90	2019-01-15 09:11:57.000000000 +0100
+++ sqm.F90.dll	2019-01-15 15:57:09.000000000 +0100
@@ -5,55 +5,44 @@
 !        SQM  stand-alone quantum program
 !
 
-program sqm
-
-   use qmmm_module, only : qmmm_nml, qmmm_struct, qmmm_mpi, qm2_struct, &
-                           qmmm_vsolv, qm2_params, deallocate_qmmm
-   use sqm_qmmm_read_and_alloc, only : read_qmmm_nm_and_alloc
-   use qm2_dftb_module, only : ks_struct
-   use constants, only : KCAL_TO_EV, EV_TO_KCAL
-   use qm2_pm6_hof_module, only : cct, nsp2, print, strlen
+module qm3
+   use qm2_pm6_hof_module, only : strlen
    use file_io_dat, only : MAX_FN_LEN
-
-   use UtilitiesModule, only : print
-
    implicit none
-
+   public
    _REAL_ x(3000), f(3000), escf
    character(len=8) atnam(1000)
    _REAL_ born_radii(1000), one_born_radii(1000)
    _REAL_ intdiel, extdiel, Arad
    integer natom, ier, atnum(1000), xmin_iter
    integer skip_mmint(1000)
-   character(len=80) arg ! temp for each of the command line arguments
-   integer iarg !         index of the current argument
-   integer last_arg_index !   index of the last argument
+   character(len=80) arg
+   integer iarg
+   integer last_arg_index
    integer ntpr
    character owrite
    character(len=MAX_FN_LEN) mdin, mdout 
-   ! external charge
    _REAL_ excharge(40000)
    integer chgatnum(40000)
    character(len=8) chgnam(40000)
    integer ncharge
-
    integer :: igb, maxcyc
    _REAL_  :: grms_tol
    _REAL_  :: total_energy
    logical :: master=.true.
-
-
    character(len=strlen) :: string
+end module qm3
 
-!   interface
-!      subroutine qm2_calc_dipole(coord,mass,ipres,lbres,nres)
-!        integer, optional, intent(in) :: nres, ipres(*)
-!        _REAL_, optional, intent(inout) :: mass(*)
-!        _REAL_, intent(inout) :: coord(*)
-!        character(len=4), optional, intent(in) :: lbres(*)
-!      end subroutine qm2_calc_dipole
-!   end interface
 
+subroutine qm3_sqm_init
+   use qmmm_module, only : qmmm_struct, qmmm_mpi, qm2_struct
+   use sqm_qmmm_read_and_alloc, only : read_qmmm_nm_and_alloc
+   use constants, only : KCAL_TO_EV, EV_TO_KCAL
+   use file_io_dat, only : MAX_FN_LEN
+   use UtilitiesModule, only : print
+   use qm3
+
+   implicit none
 
    ! ==== Initialise first_call flags for QMMM ====
    qmmm_struct%qm_mm_first_call = .true.
@@ -74,49 +63,9 @@
    iarg = 0
    owrite = 'N'  ! output status: New
    owrite = 'R'  ! output status: Replace
-   last_arg_index = command_argument_count()
-   do while (iarg < last_arg_index)
-
-      iarg = iarg + 1
-      call getarg(iarg,arg)
-
-      if (arg == '-i') then
-         iarg = iarg + 1
-         call getarg(iarg,mdin)
-      else if (arg == '-o') then
-         iarg = iarg + 1
-         call getarg(iarg,mdout)
-      else if (arg == '-O') then
-         owrite = 'R'   ! output status: Replace
-      else if (arg == '-h') then
-         write(6,'(a)') 'sqm [-O] -i <input> -o <output>'
-         write(6,'(a)') '   -O           Overwrite output file if it exists'
-         write(6,'(a)') '   -i <input>   Input file'
-         write(6,'(a)') '   -o <output>  Output file'
-         write(6,'(a)') '   -h           Show this message'
-         call mexit(6, 0)
-      else if (arg == ' ') then
-         continue
-      else
-         write(0,'(/,5x,a,a)') 'Error unknown flag: ',arg
-         call mexit(6, 1)
-      end if 
-   end do  !  while (iarg < last_arg_index)
 
    igb = 0
    call amopen(5,mdin,'O','F','R')
-   call amopen(6,mdout,owrite,'F','W')
-
-   write(6,*) '           --------------------------------------------------------'
-   write(6,*) '                            AMBER SQM VERSION 17'
-   write(6,*) ''
-   write(6,*) '                                    By'
-   write(6,*) '             Ross C. Walker, Michael F. Crowley, Scott Brozell,'
-   write(6,*) '                        Tim Giese, Andreas W. Goetz,'
-   write(6,*) '                       Tai-Sung Lee and David A. Case'
-   write(6,*) ''              
-   write(6,*) '           --------------------------------------------------------'
-   write(6,*) ''                  
 
    skip_mmint = 0
    call getsqmx( natom, x, atnam, atnum, ncharge, excharge, chgnam, chgatnum, skip_mmint )
@@ -142,19 +91,50 @@
    allocate ( qm2_struct%scf_mchg(qmmm_struct%nquant_nlink), stat = ier )
    REQUIRE(ier == 0)
 
-   if (maxcyc < 1) then
-      ! ------------------------
-      ! Single point calculation
-      ! ------------------------
-      call sqm_energy(natom, x, escf, born_radii, one_born_radii, &
+   close( 5 )
+
+end subroutine qm3_sqm_init
+
+
+
+subroutine qm3_sqm_calc( siz, dat )
+   use qmmm_module, only : qmmm_nml, qmmm_struct, qmmm_mpi, qm2_struct
+   use qm2_dftb_module, only : ks_struct
+   use qm2_pm6_hof_module, only : cct, nsp2, print, strlen
+   use constants, only : KCAL_TO_EV, EV_TO_KCAL
+   use UtilitiesModule, only : print
+   use qm3
+   implicit none
+   integer, intent( in ) :: siz
+   real*8, dimension(0:siz-1), intent( inout ) :: dat
+
+   integer :: i, j
+
+   do i = 1, 3 * ( natom - ncharge )
+      x(i) = dat(i-1)
+   end do
+   do i = 1, ncharge
+      j = 3 * ( natom - ncharge + i - 1 )
+      qmmm_struct%qm_xcrd(1,i) = dat(j)
+      qmmm_struct%qm_xcrd(2,i) = dat(j+1)
+      qmmm_struct%qm_xcrd(3,i) = dat(j+2)
+   end do
+
+   call amopen(6,mdout,owrite,'F','W')
+
+   write(6,*) '           --------------------------------------------------------'
+   write(6,*) '                            AMBER SQM VERSION 17'
+   write(6,*) ''
+   write(6,*) '                                    By'
+   write(6,*) '             Ross C. Walker, Michael F. Crowley, Scott Brozell,'
+   write(6,*) '                        Tim Giese, Andreas W. Goetz,'
+   write(6,*) '                       Tai-Sung Lee and David A. Case'
+   write(6,*) ''              
+   write(6,*) '           --------------------------------------------------------'
+   write(6,*) ''                  
+
+   call sqm_energy(natom, x, escf, born_radii, one_born_radii, &
                  intdiel, extdiel, Arad, qm2_struct%scf_mchg )
-   else
-      ! ---------------------
-      ! Geometry optimization
-      ! ---------------------
-      call xmin(natom, x, f, escf, xmin_iter, maxcyc, born_radii, &
-           one_born_radii, intdiel, extdiel, Arad, qm2_struct%scf_mchg, grms_tol, ntpr)
-   end if
 
    ! --------------------
    ! print MO eigenvalues
@@ -213,24 +193,44 @@
       call qm2_print_bondorders()
    end if
 
-!   if (qmmm_nml%verbosity > 3) then
-       open(unit=999,file="mm_output",action="write",form="unformatted")
-       write(999) escf
-      ! Calculate and print also forces in final step
-      call sqm_forces(natom, f, qm2_struct%scf_mchg)
-      close(999)
-!   end if
+   call sqm_forces(natom, f, qm2_struct%scf_mchg)
 
    write(6,*)
    
    write(6,*) '          --------- Calculation Completed ----------'
    write(6,*)
 
-   call deallocate_qmmm(qmmm_nml, qmmm_struct, qmmm_vsolv, qm2_params)
+   close( 6 )
+
+   dat(0) = escf
+   do i = 1, natom - ncharge
+      dat(i) = qm2_struct%scf_mchg( i )
+   end do
+   do i = 1, natom - ncharge
+      j = 1 + ( natom - ncharge ) + ( i - 1 ) * 3
+      dat(j)   = qmmm_struct%dxyzqm(1,i)
+      dat(j+1) = qmmm_struct%dxyzqm(2,i)
+      dat(j+2) = qmmm_struct%dxyzqm(3,i)
+   end do
+   do i = 1, ncharge
+      j = 1 + 4 * ( natom - ncharge ) + ( i - 1 ) * 3
+      dat(j)   = qmmm_struct%dxyzcl(1,i)
+      dat(j+1) = qmmm_struct%dxyzcl(2,i)
+      dat(j+2) = qmmm_struct%dxyzcl(3,i)
+   end do
+
+end subroutine qm3_sqm_calc
+
+
 
+subroutine qm3_sqm_clean
+   use qmmm_module, only : qmmm_nml, qmmm_struct, qmmm_vsolv, qm2_params, deallocate_qmmm
+   implicit none
+   call deallocate_qmmm(qmmm_nml, qmmm_struct, qmmm_vsolv, qm2_params)
    call mexit(6,0)
+end subroutine qm3_sqm_clean
+
 
-end program sqm
 
 subroutine sqm_energy(natom,coords,escf, &
                  born_radii,one_born_radii, &
@@ -437,8 +437,6 @@
      forces(m+3) = qmmm_struct%dxyzqm(3,i)
    enddo
 
-   write( 999 ) (qmmm_struct%dxyzqm(1,j), qmmm_struct%dxyzqm(2,j), qmmm_struct%dxyzqm(3,j), j=1,qmmm_struct%nquant_nlink)
-   write( 999 ) (qmmm_struct%dxyzcl(1,j), qmmm_struct%dxyzcl(2,j), qmmm_struct%dxyzcl(3,j), j=1,qmmm_struct%qm_mm_pairs)
    if (qmmm_mpi%commqmmm_master .AND. qmmm_nml%verbosity > 3) then
       
       !If verbosity level is greater than 3 we also print the force array on the QM atoms
@@ -625,15 +623,6 @@
       end do
    13 ncharge = ic
 
-      write(6,'(/80(1H-)/''  EXTERNAL CHARGES FOUND IN INPUT'',/80(1H-))')
-!      write(6,'(2x,"QMMM: External Charge Info")')
-!      write(6,'(2x,"QMMM:",1x,"ATOMIC",3x,"NAME",8x,"X",9x,"Y",9X,"Z",8X,"CHARGE")')
-!
-!      i3=0
-!      do i=1,ncharge
-!         write(6,'(2x,"QMMM:",3x,i2,6x,a6,4f10.4)') chgatnum(i), chgnam(i), excharge(i3+1:i3+4)
-!         i3=i3+4
-!      end do
    end if
 
    return
