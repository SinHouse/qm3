--- sqm.F90.orig	2020-06-15 09:46:26.000000000 +0200
+++ sqm.F90	2020-06-15 10:18:43.000000000 +0200
@@ -31,9 +31,9 @@
    character owrite
    character(len=MAX_FN_LEN) mdin, mdout 
    ! external charge
-   _REAL_ excharge(4000)
-   integer chgatnum(1000)
-   character(len=8) chgnam(1000)
+   _REAL_ excharge(40000)
+   integer chgatnum(10000)
+   character(len=8) chgnam(10000)
    integer ncharge
 
    integer :: igb, maxcyc
@@ -71,7 +71,7 @@
    mdin   = 'mdin'
    mdout  = 'mdout'
    iarg = 0
-   owrite = 'N'  ! output status: New
+   owrite = 'R'
    last_arg_index = command_argument_count()
    do while (iarg < last_arg_index)
 
@@ -210,10 +210,13 @@
       call qm2_print_bondorders()
    end if
 
-   if (qmmm_nml%verbosity > 3) then
+!   if (qmmm_nml%verbosity > 3) then
       ! Calculate and print also forces in final step
-      call sqm_forces(natom, f)
-   end if
+      open(unit=999,file="mm_output",action="write",form="unformatted")
+      write(999) escf
+      call sqm_forces(natom, f, qm2_struct%scf_mchg)
+      close(999)
+!   end if
 
    write(6,*)
    
@@ -389,7 +392,7 @@
 
 end subroutine sqm_energy
 
-subroutine sqm_forces(natom, forces)
+subroutine sqm_forces(natom, forces, scf_mchg)
 
    !=============================
    ! Calculation of QM Forces
@@ -402,17 +405,29 @@
 
   integer, intent(in) :: natom
   _REAL_ , intent(out) :: forces(natom*3)
+  _REAL_ , intent(inout) :: scf_mchg(qmmm_struct%nquant_nlink)
+  _REAL_ , dimension(:), allocatable :: vectmp1, vectmp2, vectmp3, vectmp4
 
   integer :: i, j, m
 
   qmmm_struct%dxyzqm=zero
    if (qmmm_nml%qmtheory%DFTB) then
      call qm2_dftb_get_qm_forces(qmmm_struct%dxyzqm)
+     qmmm_struct%dxyzcl = zero
+     allocate( vectmp1(qmmm_struct%qm_mm_pairs), vectmp2(qmmm_struct%qm_mm_pairs), &
+               vectmp3(qmmm_struct%qm_mm_pairs), vectmp4(qmmm_struct%qm_mm_pairs) )
+     call qm2_dftb_get_qmmm_forces(qmmm_struct%dxyzcl,qmmm_struct%dxyzqm, vectmp1,vectmp2,vectmp3,vectmp4)
+     deallocate( vectmp1, vectmp2, vectmp3, vectmp4 )
    else
      !standard semi-empirical
      call qm2_get_qm_forces(qmmm_struct%dxyzqm)
+     qmmm_struct%dxyzcl = zero
+     call qm2_get_qmmm_forces(qmmm_struct%dxyzqm,qmmm_struct%qm_xcrd,qmmm_struct%dxyzcl,scf_mchg)
    end if
 
+   write( 999 ) (qmmm_struct%dxyzqm(1,j), qmmm_struct%dxyzqm(2,j), qmmm_struct%dxyzqm(3,j), j=1,qmmm_struct%nquant_nlink)
+   write( 999 ) (qmmm_struct%dxyzcl(1,j), qmmm_struct%dxyzcl(2,j), qmmm_struct%dxyzcl(3,j), j=1,qmmm_struct%qm_mm_pairs)
+
    !NOW PUT THE CALCULATED gradient (not force!) INTO THE SANDER FORCE ARRAY
    do i=1,qmmm_struct%nquant
      m = qmmm_struct%iqmatoms(i)
@@ -536,7 +551,7 @@
    ! check header names
    ihead=0
    iend=0
-   do i=1,999
+   do i=1,11999
       read(lun,'(a)',end=10) line
       if (line(1:1) == "#") then
          if (line(1:80) == "#EXCHARGES") then
@@ -591,7 +606,7 @@
    if (mdin_external_charge) then
       i3=0
       ic=0
-      do i=1,999
+      do i=1,9999
          read(lun,'(a)',end=14) line
          if (line(1:80) /= "") then
             if (line(1:80) /= "#END") then
@@ -606,14 +621,14 @@
    13 ncharge = ic
 
       write(6,'(/80(1H-)/''  EXTERNAL CHARGES FOUND IN INPUT'',/80(1H-))')
-      write(6,'(2x,"QMMM: External Charge Info")')
-      write(6,'(2x,"QMMM:",1x,"ATOMIC",3x,"NAME",8x,"X",9x,"Y",9X,"Z",8X,"CHARGE")')
-
-      i3=0
-      do i=1,ncharge
-         write(6,'(2x,"QMMM:",3x,i2,6x,a6,4f10.4)') chgatnum(i), chgnam(i), excharge(i3+1:i3+4)
-         i3=i3+4
-      end do
+!      write(6,'(2x,"QMMM: External Charge Info")')
+!      write(6,'(2x,"QMMM:",1x,"ATOMIC",3x,"NAME",8x,"X",9x,"Y",9X,"Z",8X,"CHARGE")')
+!
+!      i3=0
+!      do i=1,ncharge
+!         write(6,'(2x,"QMMM:",3x,i2,6x,a6,4f10.4)') chgatnum(i), chgnam(i), excharge(i3+1:i3+4)
+!         i3=i3+4
+!      end do
    end if
 
    return
