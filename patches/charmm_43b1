patch -b -p0 << EOD
--- charmm/charmm_main.src	2019-01-09 12:27:03.000000000 +0100
+++ charmm/charmm_main.src.new	2019-01-10 09:43:13.000000000 +0100
@@ -758,6 +758,9 @@
   integer comlen
   logical lused
 
+! xexo
+  integer shm_alloc
+
   !     The following are local variables.
 
 #if KEY_TSALLIS==1
@@ -845,6 +848,19 @@
      call cstran(comlyn,comlen)
   case('COOR') cmds
      call corcom(comlyn,comlen)
+! xexo --------------------------------------------
+  case( 'SHMS' ) cmds
+!		allocate SHM memory (once the system has been built!) and store it at "charmm.shmid"
+!		SHMID can be stored in dimens_ltm.src
+     shmid = shm_alloc( natom )
+     write(outu,*) "> SHM address identifier:", shmid
+  case( 'SHMC' ) cmds
+!		map SHM coordinates into X,Y,Z (coord_ltm.src)
+     call shm_coord( shmid, natom, x, y, z )
+  case( 'SHMQ' ) cmds
+!		map SHM charges into CG (psf_ltm.src)
+     call shm_charg( shmid, natom, cg )
+! -------------------------------------------------
   case('CORR') cmds
      call correl(0,ddv_dummy)
   case('CRYS') cmds
EOD


patch -b -p0 << EOD
--- charmm/iniall.src	2019-01-10 07:56:14.000000000 +0100
+++ charmm/iniall.src.new	2019-01-10 09:21:56.000000000 +0100
@@ -763,6 +763,7 @@
 #if KEY_ENSEMBLE==1
   use evb_mod, only: qevb, evb_deallocate
 #endif
+
   implicit none
   character(len=10) :: file = "iniall.src"
   character(len=9) :: routine = "stopch"
@@ -776,6 +777,9 @@
   integer,PARAMETER :: TMAX=80
   character(len=TMAX) T
   !
+! xexo
+  if( shmid > 0 ) call shm_clean( shmid )
+
 #if KEY_PARALLEL==1
   IF(QSPLIT)THEN
      numnod=numnodg
EOD


patch -b -p0 << EOD
--- energy/eutil.src	2019-01-09 13:16:17.000000000 +0100
+++ energy/eutil.src.new	2019-01-10 09:43:52.000000000 +0100
@@ -900,6 +900,9 @@
   use coord
   use coordc
   use energym
+! xexo
+  use deriv
+
   use image
   use psf
   use stream
@@ -1082,6 +1085,10 @@
 #endif
   ENDIF
 
+! xexo
+!	map energy: EPROP(EPOT) (energym.src) and gradients: DX, DY, DZ (deriv_ltm.src) to SHM
+  if( shmid > 0 ) call shm_engrd( shmid, natom, eprop(epot), dx, dy, dz )
+
   ! Do some printing.
   IF (QPRINT) THEN
      UNIT = GTRMI(COMLYN, COMLEN, 'UNIT', OUTU)
EOD


patch -b -p0 << EOD
--- ltm/dimens_ltm.src	2019-01-09 13:16:58.000000000 +0100
+++ ltm/dimens_ltm.src.new	2019-01-10 07:43:59.000000000 +0100
@@ -1,5 +1,7 @@
 module dimens_fcm
   implicit none
+! xexo
+integer :: shmid = -1
     !-----------------------------------------------------------------------
     !
     !
EOD


patch -b -p0 << EOD
--- machdep/cstuff.c	2019-01-09 14:59:13.000000000 +0100
+++ machdep/cstuff.c.new	2019-01-10 10:31:44.000000000 +0100
@@ -32,6 +32,62 @@
 #include <wordexp.h>
 #include <ctype.h>
 
+// xexo ------------------------------------------------------------------------------------
+#include <sys/ipc.h>
+#include <sys/shm.h>
+
+void shm_clean_( long *shmid ) { 
+	int		i_shmid = (int)(*shmid);
+	if( i_shmid > 0 ) shmctl( i_shmid, IPC_RMID, 0 );
+}
+
+long shm_alloc_( long *natom ) {
+	int		i_natom = (int)(*natom);
+	int		siz = ( 3 * i_natom + 2 ) * 8;
+	int		xid = shmget( IPC_PRIVATE, siz, IPC_CREAT | 0600 );
+	FILE	*fd = fopen( "charmm.shmid", "wt" );
+	fprintf( fd, "%d", xid ); fclose( fd );
+	return( (long)xid );
+}
+
+void shm_engrd_( long *shmid, long *natom, double *ener, double *dx, double *dy, double *dz ) {
+	int		i, i_shmid = (int)(*shmid), i_natom = (int)(*natom);
+	double	*mem;
+
+	mem = (double*) shmat( i_shmid, 0, 0 );
+	mem[1] = (double)(*ener);
+	for( i = 0; i < i_natom; i++ ) {
+		mem[2+i*3]   = dx[i]; 
+		mem[2+i*3+1] = dy[i]; 
+		mem[2+i*3+2] = dz[i]; 
+	}
+	mem[0] = 1.0;
+	shmdt( mem );
+}
+
+void shm_coord_( long *shmid, long *natom, double *x, double *y, double *z ) {
+	int		i, i_shmid = (int)(*shmid), i_natom = (int)(*natom);
+	double	*mem;
+
+	mem = (double*) shmat( i_shmid, 0, 0 );
+	for( i = 0; i < i_natom; i++ ) {
+		x[i] = mem[1+i*3];
+		y[i] = mem[1+i*3+1];
+		z[i] = mem[1+i*3+2];
+	}
+	shmdt( mem );
+}
+
+void shm_charg_( long *shmid, long *natom, double *cg ) {
+	int		i, i_shmid = (int)(*shmid), i_natom = (int)(*natom);
+	double	*mem;
+
+	mem = (double*) shmat( i_shmid, 0, 0 );
+	for( i = 0; i < i_natom; i++ ) cg[i] = mem[1+i];
+	shmdt( mem );
+}
+// -----------------------------------------------------------------------------------------
+
 // aag 06/07
 // read/write binary namd file
 void readnamd(double * x, double * y, double * z, int * ptr_natom,
EOD


