patch -p0 << EOD
--- Controller.C	2016-10-14 18:12:12.000000000 +0200
+++ Controller__.C	2018-05-05 08:21:02.000000000 +0200
@@ -40,6 +40,7 @@
 #include <iomanip>
 #include <errno.h>
 #include "qd.h"
+//#include <string.h>
 
 #include "ComputeNonbondedMICKernel.h"
 
@@ -381,6 +382,9 @@
       case SCRIPT_ATOMSENDRECV:
       case SCRIPT_ATOMSEND:
       case SCRIPT_ATOMRECV:
+// -- xexo --
+      case SCRIPT_RELOADCHARGES:
+// ---------------------------------------
         break;
       case SCRIPT_MINIMIZE:
         minimize();
@@ -2942,6 +2946,17 @@
 
     }
 
+// -- xexo --
+    if( step == 0 ) {
+      char pot[8];
+      bzero( pot, 8 );
+      memcpy( &pot[0], &totalEnergy, 8 );
+      FILE *fd = fopen( "namd.ener", "wb" );
+      fwrite( pot, 8, 1, fd );
+      fclose( fd );
+    }
+// ---------------------------------------
+
     // N.B.  HP's aCC compiler merges FORMAT calls in the same expression.
     //       Need separate statements because data returned in static array.
     iout << ETITLE(step);
EOD

patch -p0 << EOD
--- ScriptTcl.C	2016-09-27 17:40:41.000000000 +0200
+++ ScriptTcl__.C	2018-05-05 08:21:15.000000000 +0200
@@ -1666,6 +1666,30 @@
     vcoords = new Vector[3*numatoms];
     iout << iINFO << "Coordinate file " << argv[3] << " opened for reading.\n"
          << endi;
+// -- xexo --
+  } else if (argc == 3 && !strcmp(argv[1], "binread")) {
+  float tmp;
+  char buf[4];
+  FILE *fd = fopen( argv[2], "rb" );
+  if( fd != NULL ) {
+    fread( buf, 1, 4, fd ); memcpy( &numatoms, &buf[0], 4 );
+    vcoords = new Vector[numatoms];
+    for( int i = 0; i < numatoms; i++ ) {
+      fread( buf, 1, 4, fd ); memcpy( &tmp, &buf[0], 4 ); vcoords[i].x = tmp;
+      fread( buf, 1, 4, fd ); memcpy( &tmp, &buf[0], 4 ); vcoords[i].y = tmp;
+      fread( buf, 1, 4, fd ); memcpy( &tmp, &buf[0], 4 ); vcoords[i].z = tmp;
+    }
+    fclose( fd );
+    Node::Object()->pdb->set_all_positions( vcoords );
+    script->reinitAtoms();
+    Tcl_SetObjResult( interp, Tcl_NewIntObj( 0 ) );
+    iout << iINFO << "Binary coordinate file " << argv[2] << " just read.\n" << endi;
+    return( TCL_OK );
+  } else {
+    Tcl_AppendResult( interp, "coorfile binread: Error, no file for reading...", NULL );
+    return( TCL_ERROR );
+  }
+// ---------------------------------------
   } else if (argc == 2 && !strcmp(argv[1], "read")) {
     if (filehandle == NULL) {
       Tcl_AppendResult(interp, "coorfile read: Error, no file open for reading",
EOD
