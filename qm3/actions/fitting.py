# -*- coding: iso-8859-1 -*-

from __future__ import print_function, division
import	sys
if( sys.version_info[0] == 2 ):
	range = xrange
import	math
import	qm3.actions.minimize
import	qm3.problem
import	qm3.maths.matrix




"""
                                Samples for PES fitting

			[http://www.originlab.com/doc/Origin-Help/Curve-Fitting-Function]


def function( x, c ):
	return( c[0] * ( 1 + c[1] * math.exp( - x / c[2] ) ) / ( 1 + c[3] * math.exp( - x / c[4] ) ) )


c[2] / c[5] can be fixed at minima

def function( x, c ):
	return( c[0] * ( 1 - math.exp( - c[1] * ( x - c[2] ) ) ** 2 + c[3] * math.exp( - c[4] * ( x - c[5] ) ** 2 ) ) )


"""


class problem( qm3.problem.template ):

	def __init__( self, x, y, ext_func, ext_parm ):
		self.efun = ext_func
		self.coor = ext_parm[:]
		self.size = len( self.coor )
		self.func = 0
		self.grad = [ 0.0 for i in range( self.size ) ]
		self.hess = None
		self.__x = x[:]
		self.__y = y[:]
		self.__n = len( self.__x )


	def get_func( self ):
		self.func = 0.0
		for i in range( self.__n ):
			self.func += math.pow( self.efun( self.__x[i], self.coor ) - self.__y[i], 2.0 )


	def get_grad( self ):
		self.get_func()
		be = self.func
		ic = 1.0e-6
		for i in range( self.size ):
			bc = self.coor[i]
			self.coor[i] += ic
			self.get_func()
			self.grad[i] = ( self.func - be ) / ic
			self.coor[i] = bc
		self.func = be
	

	def correlation( self ):
		y_m = sum( self.__y ) / float( self.__n )
		y_d = 0.0
		y_s = 0.0
		for i in range( self.__n ):
			p_v = self.__y[i] - self.efun( self.__x[i], self.coor )
			y_d += p_v * p_v
			y_s += math.pow( self.__y[i] - y_m, 2.0 )
		self.Rsq = 1.0 - y_d / y_s
		return( self.Rsq )

	
	def table( self, fname = None ):
		if( fname ):
			fd = open( fname, "wt" )
		else:
			fd = sys.stdout
		fd.write( "# %.10lf\n"%( self.Rsq ) )
		fd.write( "# " + str.join( " ", [ "%.10lf"%( self.coor[i] ) for i in range( self.size ) ] ) + "\n" )
		fd.write( "#%19s%20s%20s\n"%( "X", "Y", "Fitted" ) )
		for i in range( self.__n ):
			fd.write( "%20.10lf%20.10lf%20.10lf\n"%( self.__x[i], self.__y[i], self.efun( self.__x[i], self.coor ) ) )
		if( fname ):
			fd.close()


	def fit( self, minimize_func = None ):
		if( minimize_func ):
			minimize_func( self )
		else:
			qm3.actions.minimize.steepest_descent( self, step_number = 1000, print_frequency = 1000, gradient_tolerance = 100.0, step_size = 0.1 )
			qm3.actions.minimize.l_bfgs( self, step_number = 1000, print_frequency = 100, gradient_tolerance = 0.01, step_size = 0.1 )
		self.correlation()
		return( self.Rsq, self.coor )





# - Multiple Linear Regression:
# Y: [] (N)
# X: [ [x1], ..., [xk] ] (k,N)
#
# correlation (R^2)
# coefficients: [ao, a1, ..., ak]
# standard deviations for coefficients: [s(ao), s(a1), ..., s(ak)]
def MLR( x, y, normalize = False ):
	n = len( y )
	k = len( x )
	if( sum( [ len( x[i] ) for i in range( k ) ] ) != k * n ):
		raise Exception( "MLR: Invalid dimensions: X_{N,k} vs Y_{N,1}" )
	if( normalize ):
		# --------------------------------------------------------------------------------
		# Normalized X & Y: [a1, ..., ak]
		#
		my = sum( y ) / float( n )
		ny = [ float( y[i] ) - my for i in range( n ) ]
		mx = []
		for i in range( k ):
			mx.append( sum( x[i] ) / float( n ) )
		nx = []
		for j in range( k ):
			t = []
			for i in range( n ):
				t.append( float( x[j][i] ) - mx[j] )
			nx.append( t[:] )
		v = []
		for j in range( k ):
			v.append( sum( [ ny[i]*nx[j][i] for i in range( n ) ] ) )
		m = []
		for i in range( k ):
			for j in range( i, k ):
				m.append( sum( [ nx[i][l]*nx[j][l] for l in range( n ) ] ) )
		b = qm3.maths.matrix.inverse( qm3.maths.matrix.from_upper_diagonal_rows( m, k ), k, k )
		c = qm3.maths.matrix.mult( b, k, k, v, k, 1 )
		r = sum( [ ny[i]*ny[i] for i in range( n ) ] )
		t = 0.0
		for i in range( n ):
			tt = 0.0
			for j in range( k ):
				tt += nx[j][i] * c[j]
			t += ( tt - ny[i] ) * ( tt - ny[i] )
		r = 1 - t / r
		return( r, c, [ b[i*k+i] for i in range( k ) ], mx, my )
	else:
	# --------------------------------------------------------------------------------
	# UN-Normalized X & Y: [a0,a1, ..., ak]
	#
		v = [ float( sum( y ) ) ]
		for i in range( k ):
			v.append( float( sum( [ ii*jj for ii,jj in zip( y, x[i] ) ] ) ) )
		m = [ float( n ) ]
		for i in range( k ):
			m.append( float( sum( x[i] ) ) )
		for i in range( k ):
			for j in range( i, k ):
				m.append( float( sum( [ ii*jj for ii,jj in zip( x[i], x[j] ) ] ) ) )
		b = qm3.maths.matrix.inverse( qm3.maths.matrix.from_upper_diagonal_rows( m, k+1 ), k+1, k+1 )
		c = qm3.maths.matrix.mult( b, k+1, k+1, v, k+1, 1 )
		r = sum( [ (float(i)-v[0]/float(n))*(float(i)-v[0]/float(n)) for i in y ] )
		t = 0.0
		for i in range( n ):
			tt = c[0]
			for j in range( k ):
				tt += x[j][i] * c[j+1]
			t += ( tt - y[i] ) * ( tt - y[i] )
		r = 1 - t / r
		if( n > k + 1 ):
			return( r, c, [ t * b[i*(k+1)+i] / ( n - k - 1.0 ) for i in range( k+1 ) ] )
		else:
			return( r, c, None )



# - Partial Least Squares
# Y: [] (N)
# X: [ [x1], ..., [xk] ] (k,N)
#
# correlation (R^2)
# coefficients: [a1, ..., ak]
# mean-X: [ <x1>, ..., <xk> ]
# mean-Y: <y>
def PLS( x, y ):
	n = len( y )
	k = len( x )
	if( sum( [ len( i ) for i in x ] ) != k * n or len( y ) != n ):
		raise Exception( "PLS: Invalid dimensions: X_{N,k} vs Y_{N,1}" )
	mx = [ float( sum( x[i] ) ) / float( n ) for i in range( k ) ]
	nx = []
	for j in range( n ):
		for i in range( k ):
			nx.append( float( x[i][j] ) - mx[i] )
	ox = nx[:]
	my = float( sum( y ) ) / float( n )
	ny = [ float( y[i] - my ) for i in range( n ) ]
	u = ny[:]
	D = []
	C = []
	P = []
	ex = 1e9
	while( ex > 0.0001 ):
		eu = 1e9
		while( eu > 0.0001 ):
			w = qm3.maths.matrix.norm( qm3.maths.matrix.mult( qm3.maths.matrix.T( nx, n, k ), k, n, u, n, 1 ) )
			t = qm3.maths.matrix.norm( qm3.maths.matrix.mult( nx, n, k, w, k, 1 ) )
			c = sum( [ ny[i]*t[i] for i in range( n ) ] )
			c /= math.fabs( c )
			u = [ ny[i] * c for i in range( n ) ]
			eu = math.sqrt( sum( [ (ny[i]-u[i])*(ny[i]-u[i]) for i in range( n ) ] ) )
		C.append( c )
		b = sum( [ t[i]*u[i] for i in range( n )  ] )
		D.append( b )
#		_p = sum( [ t[i]*t[i] for i in range( n ) ] )
#		p = [ ii/_p for ii in qm3.maths.matrix.mult( qm3.maths.matrix.T( nx, n, k ), k, n, t, n, 1 ) ]
		p = qm3.maths.matrix.mult( qm3.maths.matrix.T( nx, n, k ), k, n, t, n, 1 )
		P += p[:]
#		q = sum( [ ny[i]*u[i] for i in range( n ) ] ) / sum( [ u[i]*u[i] for i in range( n ) ] )
		nx = [ ii-jj for ii,jj in zip( nx, qm3.maths.matrix.mult( t, n, 1, p, 1, k ) ) ]
		ny = [ ny[i]-b*t[i]*c for i in range( n ) ]
		ex = math.sqrt( sum( [ nx[i]*nx[i] for i in range( n * k ) ] ) )
	m = len( C )
	B = qm3.maths.matrix.from_diagonal( D, m )
	coef = qm3.maths.matrix.mult( qm3.maths.matrix.inverse( P, m, k ), k, m, qm3.maths.matrix.mult( B, m, m, C, m, 1 ), m, 1 )
	sr = 0.0
	sy = 0.0
	for i in range( n ):
		sy += ( y[i] - my ) * ( y[i] - my )
		yc = 0.0
		for j in range( k ):
			yc += ox[i*k+j] * coef[j]
		sr += ( yc + my - y[i] ) * ( yc + my - y[i] )
	return( 1 - sr / sy, coef, mx, my )



def poly_val( v, x ):
	return( sum( [ v[i] * math.pow( x, i ) for i in range( len( v ) ) ] ) )



#  [ a0, a1, ..., an ]  ==  a0 + a1 * x + ... + an * x^n
def poly_fit( vec_x, vec_y, order ):
	def __gen_sum( v, k ):
		return( sum( [ math.pow( v[i], k ) for i in range( len( v ) ) ] ) )

	def __gen_yxsum( vy, vx, k ):
		return( sum( [ vy[i]*math.pow( vx[i], k ) for i in range( len( vy ) ) ] ) )

	siz = len( vec_x )
	ror = order + 1
	if( siz < ror or siz != len( vec_y ) ):
		return( None )
	# Independent terms...
	ind = [ __gen_sum( vec_y, 1 ) ]
	for i in range( 1, ror ):
		ind.append( __gen_yxsum( vec_y, vec_x, i ) )
	# Matrix terms...
	t = [ siz ]
	for i in range( 1, 2 * ror - 1 ):
		t.append( __gen_sum( vec_x, i ) )
	mat = []
	for i in range( ror ):
		for j in range( ror ):
			mat.append( t[i+j] )
	sdc = qm3.maths.matrix.inverse( mat, ror, ror )
	cof = qm3.maths.matrix.mult( sdc, ror, ror, ind, ror, 1 )
	# Calculate correlation of the fit
	y_m = __gen_sum( vec_y, 1 ) / float( siz )
	y_d = 0.0
	y_s = 0.0
	for i in range( siz ):
		t = vec_y[i] - poly_val( cof, vec_x[i] )
		y_d += t * t
		y_s += ( vec_y[i] - y_m ) * ( vec_y[i] - y_m )
	return( 1.0 - y_d / y_s, cof, [ sdc[i*ror+i] for i in range( ror ) ] )




def savitzky_golay( x, y, points = 5, gradient = False ):
	"""
	Savitzky-Golay cubic smoothing for 5, 7, 9, 11, 13, 15, 17, 19 and 21 fitting total points (2 * m + 1)

	x values should be equally spaced!
	returns the fitted values and their first derivative
	"""
	n  = len( x )
	m  = ( points - 1 ) // 2
	f  = None
	g  = None
	wf = None
	cf = None
	wg = None
	cg = None
	if( points == 7 and n >= 7 ):
		wf = [ 42,42,42,21,42,42,42 ]
		cf = [ [ 39,8,-4,-4,1,4,-2 ],
				[ 8,19,16,6,-4,-7,4 ],
				[ -4,16,19,12,2,-4,1 ],
				[ -2,3,6,7,6,3,-2 ],
				[ 1,-4,2,12,19,16,-4 ],
				[ 4,-7,-4,6,16,19,8 ],
				[ -2,4,1,-4,-4,8,39 ] ]
		wg = [ 252,252,252,252,252,252,252 ]
		cg = [ [ -257,122,185,72,-77,-122,77 ],
				[ -122,17,62,48,10,-17,2 ],
				[ -29,-46,-19,24,55,46,-31 ],
				[ 22,-67,-58,0,58,67,-22 ],
				[ 31,-46,-55,-24,19,46,29 ],
				[ -2,17,-10,-48,-62,-17,122 ],
				[ -77,122,77,-72,-185,-122,257 ] ]
	elif( points == 9 and n >= 9 ):
		wf = [ 99,198,1386,462,231,462,1386,198,99 ]
		cf = [ [ 85,28,-2,-12,-9,0,8,8,-7 ],
				[ 56,65,56,36,12,-9,-20,-14,16 ],
				[ -28,392,515,432,234,12,-143,-140,112 ],
				[ -56,84,144,145,108,54,4,-21,0 ],
				[ -21,14,39,54,59,54,39,14,-21 ],
				[ 0,-21,4,54,108,145,144,84,-56 ],
				[ 112,-140,-143,12,234,432,515,392,-28 ],
				[ 16,-14,-20,-9,12,36,56,65,56 ],
				[ -7,8,8,0,-9,-12,-2,28,85 ] ]
		wg = [ 8316,8316,8316,8316,1188,8316,8316,8316,8316 ]
		cg = [ [ -6118,854,3593,3366,1440,-918,-2441,-1862,2086 ],
				[ -3556,-49,1538,1737,1080,99,-674,-707,532 ],
				[ -1582,-658,29,486,720,738,547,154,-434 ],
				[ -196,-973,-934,-387,360,999,1222,721,-812 ],
				[ 86,-142,-193,-126,0,126,193,142,-86 ],
				[ 812,-721,-1222,-999,-360,387,934,973,196 ],
				[ 434,-154,-547,-738,-720,-486,-29,658,1582 ],
				[ -532,707,674,-99,-1080,-1737,-1538,49,3556 ],
				[ -2086,1862,2441,918,-1440,-3366,-3593,-854,6118 ] ]
	elif( points == 11 and n >= 11 ):
		wf = [ 143,143,429,858,429,429,429,858,429,143,143 ]
		cf = [ [ 113,48,8,-12,-17,-12,-2,8,13,8,-12 ],
				[ 48,41,32,22,12,3,-4,-8,-8,-3,8 ],
				[ 24,96,123,116,86,44,1,-32,-44,-24,39 ],
				[ -72,132,232,251,212,138,52,-23,-64,-48,48 ],
				[ -51,36,86,106,103,84,56,26,1,-12,-6 ],
				[ -36,9,44,69,84,89,84,69,44,9,-36 ],
				[ -6,-12,1,26,56,84,103,106,86,36,-51 ],
				[ 48,-48,-64,-23,52,138,212,251,232,132,-72 ],
				[ 39,-24,-44,-32,1,44,86,116,123,96,24 ],
				[ 8,-3,-8,-8,-4,3,12,22,32,41,48 ],
				[ -12,8,13,8,-2,-12,-17,-12,8,48,113 ] ]
		wg = [ 2574,5148,2574,5148,2574,5148,2574,5148,2574,5148,2574 ]
		cg = [ [ -1425,-102,589,791,647,300,-107,-431,-529,-258,525 ],
				[ -1860,-294,572,889,808,480,56,-313,-476,-282,420 ],
				[ -525,-174,49,167,203,180,121,49,-13,-42,-15 ],
				[ -420,-366,-244,-83,88,240,344,371,292,78,-300 ],
				[ 15,-174,-227,-181,-73,60,181,253,239,102,-195 ],
				[ 300,-294,-532,-503,-296,0,296,503,532,294,-300 ],
				[ 195,-102,-239,-253,-181,-60,73,181,227,174,-15 ],
				[ 300,-78,-292,-371,-344,-240,-88,83,244,366,420 ],
				[ 15,42,13,-49,-121,-180,-203,-167,-49,174,525 ],
				[ -420,282,476,313,-56,-480,-808,-889,-572,294,1860 ],
				[ -525,258,529,431,107,-300,-647,-791,-589,102,1425 ] ]
	elif( points == 13 and n >= 13 ):
		wf = [ 364,91,2002,1001,4004,1001,143,1001,4004,1001,2002,91,364 ]
		cf = [ [ 265,132,42,-12,-37,-40,-28,-8,13,28,30,12,-33 ],
				[ 33,25,18,12,7,3,0,-2,-3,-3,-2,0,3 ],
				[ 231,396,460,444,369,256,126,0,-101,-156,-144,-44,165 ],
				[ -33,132,222,251,233,182,112,37,-29,-72,-78,-33,77 ],
				[ -407,308,738,932,939,808,588,328,77,-116,-202,-132,143 ],
				[ -110,33,128,182,202,195,168,128,82,37,0,-22,-22 ],
				[ -11,0,9,16,21,24,25,24,21,16,9,0,-11 ],
				[ -22,-22,0,37,82,128,168,195,202,182,128,33,-110 ],
				[ 143,-132,-202,-116,77,328,588,808,939,932,738,308,-407 ],
				[ 77,-33,-78,-72,-29,37,112,182,233,251,222,132,-33 ],
				[ 165,-44,-144,-156,-101,0,126,256,369,444,460,396,231 ],
				[ 3,0,-2,-3,-3,-2,0,3,7,12,18,25,33 ],
				[ -33,12,30,28,13,-8,-28,-40,-37,-12,42,132,265 ] ]
		wg = [ 24024,12012,24024,12012,24024,12012,24024,12012,24024,12012,24024,12012,24024 ]
		cg = [ [ -10351,-2244,2670,4972,5243,4064,2016,-320,-2363,-3532,-3246,-924,4015 ],
				[ -3641,-990,666,1502,1693,1414,840,146,-493,-902,-906,-330,1001 ],
				[ -4675,-1716,246,1372,1823,1760,1344,736,97,-412,-630,-396,451 ],
				[ -1265,-726,-294,38,277,430,504,506,443,322,150,-66,-319 ],
				[ -847,-1188,-1170,-884,-421,128,672,1120,1381,1364,978,132,-1265 ],
				[ 187,-462,-750,-754,-551,-218,168,530,791,874,702,198,-715 ],
				[ 1133,-660,-1578,-1796,-1489,-832,0,832,1489,1796,1578,660,-1133 ],
				[ 715,-198,-702,-874,-791,-530,-168,218,551,754,750,462,-187 ],
				[ 1265,-132,-978,-1364,-1381,-1120,-672,-128,421,884,1170,1188,847 ],
				[ 319,66,-150,-322,-443,-506,-504,-430,-277,-38,294,726,1265 ],
				[ -451,396,630,412,-97,-736,-1344,-1760,-1823,-1372,-246,1716,4675 ],
				[ -1001,330,906,902,493,-146,-840,-1414,-1693,-1502,-666,990,3641 ],
				[ -4015,924,3246,3532,2363,320,-2016,-4064,-5243,-4972,-2670,2244,10351 ] ]
	elif( points == 15 and n >= 15 ):
		wf = [ 3060,21420,278460,139230,278460,278460,30940,1105,30940,278460,278460,139230,278460,21420,3060 ]
		cf = [ [ 2059,1144,484,44,-211,-316,-306,-216,-81,64,184,244,209,44,-286 ],
				[ 8008,5833,4048,2618,1508,683,108,-252,-432,-467,-392,-242,-52,143,308 ],
				[ 44044,52624,54709,51524,44294,34244,22599,10584,-576,-9656,-15431,-16676,-12166,-676,19019 ],
				[ 2002,17017,25762,29252,28502,24527,18342,10962,3402,-3323,-8198,-10208,-8338,-1573,11102 ],
				[ -19201,19604,44294,57004,59869,55024,44604,30744,15579,1244,-10126,-16396,-15431,-5096,16744 ],
				[ -28756,8879,34244,49054,55024,53869,47304,37044,24804,12299,1244,-6646,-9656,-6071,5824 ],
				[ -3094,156,2511,4076,4956,5256,5081,4536,3726,2756,1731,756,-64,-624,-819 ],
				[ -78,-13,42,87,122,147,162,167,162,147,122,87,42,-13,-78 ],
				[ -819,-624,-64,756,1731,2756,3726,4536,5081,5256,4956,4076,2511,156,-3094 ],
				[ 5824,-6071,-9656,-6646,1244,12299,24804,37044,47304,53869,55024,49054,34244,8879,-28756 ],
				[ 16744,-5096,-15431,-16396,-10126,1244,15579,30744,44604,55024,59869,57004,44294,19604,-19201 ],
				[ 11102,-1573,-8338,-10208,-8198,-3323,3402,10962,18342,24527,28502,29252,25762,17017,2002 ],
				[ 19019,-676,-12166,-16676,-15431,-9656,-576,10584,22599,34244,44294,51524,54709,52624,44044 ],
				[ 308,143,-52,-242,-392,-467,-432,-252,108,683,1508,2618,4048,5833,8008 ],
				[ -286,44,209,244,184,64,-81,-216,-306,-316,-211,44,484,1144,2059 ] ]
		wg = [ 334152,334152,334152,334152,334152,334152,334152,334152,334152,334152,334152,334152,334152,334152,334152 ]
		cg = [ [ -115115,-37154,14683,44372,55889,53210,40311,21168,-243,-19946,-33965,-38324,-29047,-2158,46319 ],
				[ -85358,-30797,6154,28106,37670,37457,30078,18144,4266,-8945,-18878,-22922,-18466,-2899,26390 ],
				[ -59423,-24986,-905,14276,22013,23762,20979,15120,7641,-2,-6353,-9956,-9355,-3094,10283 ],
				[ -37310,-19721,-6494,2882,8918,12125,13014,12096,9882,6883,3610,574,-1714,-2743,-2002 ],
				[ -19019,-15002,-10613,-6076,-1615,2546,6183,9072,10989,11710,11011,8668,4457,-1846,-10465 ],
				[ -4550,-10829,-13262,-12598,-9586,-4975,486,6048,10962,14479,15850,14326,9158,-403,-15106 ],
				[ 6097,-7202,-14441,-16684,-14995,-10438,-4077,3024,9801,15190,18127,17548,12389,1586,-15925 ],
				[ 12922,-4121,-14150,-18334,-17842,-13843,-7506,0,7506,13843,17842,18334,14150,4121,-12922 ],
				[ 15925,-1586,-12389,-17548,-18127,-15190,-9801,-3024,4077,10438,14995,16684,14441,7202,-6097 ],
				[ 15106,403,-9158,-14326,-15850,-14479,-10962,-6048,-486,4975,9586,12598,13262,10829,4550 ],
				[ 10465,1846,-4457,-8668,-11011,-11710,-10989,-9072,-6183,-2546,1615,6076,10613,15002,19019 ],
				[ 2002,2743,1714,-574,-3610,-6883,-9882,-12096,-13014,-12125,-8918,-2882,6494,19721,37310 ],
				[ -10283,3094,9355,9956,6353,2,-7641,-15120,-20979,-23762,-22013,-14276,905,24986,59423 ],
				[ -26390,2899,18466,22922,18878,8945,-4266,-18144,-30078,-37457,-37670,-28106,-6154,30797,85358 ],
				[ -46319,2158,29047,38324,33965,19946,243,-21168,-40311,-53210,-55889,-44372,-14683,37154,115115 ] ]
	elif( points == 17 and n >= 17 ):
		wf = [ 969,3876,3876,3876,1938,3876,3876,3876,323,3876,3876,3876,1938,3876,3876,3876,969 ]
 		cf = [ [ 605,364,182,52,-33,-80,-96,-88,-63,-28,10,44,67,72,52,0,-91 ],
				[ 1456,1055,728,468,268,121,20,-42,-72,-77,-64,-40,-12,13,28,26,0 ],
				[ 728,728,691,624,534,428,313,196,84,-16,-97,-152,-174,-156,-91,28,208 ],
				[ 208,468,624,691,684,618,508,369,216,64,-72,-177,-236,-234,-156,13,288 ],
				[ -66,134,267,342,368,354,309,242,162,78,-1,-66,-108,-118,-87,-6,134 ],
				[ -320,121,428,618,708,715,656,548,408,253,100,-34,-132,-177,-152,-40,176 ],
				[ -384,20,313,508,618,656,635,568,468,348,221,100,-2,-72,-97,-64,40 ],
				[ -352,-42,196,369,484,548,568,551,504,434,348,253,156,64,-16,-77,-112 ],
				[ -21,-6,7,18,27,34,39,42,43,42,39,34,27,18,7,-6,-21 ],
				[ -112,-77,-16,64,156,253,348,434,504,551,568,548,484,369,196,-42,-352 ],
				[ 40,-64,-97,-72,-2,100,221,348,468,568,635,656,618,508,313,20,-384 ],
				[ 176,-40,-152,-177,-132,-34,100,253,408,548,656,715,708,618,428,121,-320 ],
				[ 134,-6,-87,-118,-108,-66,-1,78,162,242,309,354,368,342,267,134,-66 ],
				[ 288,13,-156,-234,-236,-177,-72,64,216,369,508,618,684,691,624,468,208 ],
				[ 208,28,-91,-156,-174,-152,-97,-16,84,196,313,428,534,624,691,728,728 ],
				[ 0,26,28,13,-12,-40,-64,-77,-72,-42,20,121,268,468,728,1055,1456 ],
				[ -91,0,52,72,67,44,10,-28,-63,-88,-96,-80,-33,52,182,364,605 ] ]
		wg = [ 23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256,23256 ]
		cg = [ [ -6548,-2642,125,1902,2838,3082,2783,2090,1152,118,-863,-1642,-2070,-1998,-1277,242,2708 ],
				[ -5048,-2177,-118,1233,1980,2227,2078,1637,1008,295,-398,-967,-1308,-1317,-890,77,1688 ],
				[ -3716,-1754,-319,654,1230,1474,1451,1226,864,430,-11,-394,-654,-726,-545,-46,836 ],
				[ -2552,-1373,-478,165,588,823,902,857,720,523,298,77,-108,-225,-242,-127,152 ],
				[ -1556,-1034,-595,-234,54,274,431,530,576,574,529,446,330,186,19,-166,-364 ],
				[ -728,-737,-670,-543,-372,-173,38,245,432,583,682,713,660,507,238,-163,-712 ],
				[ -68,-482,-703,-762,-690,-518,-277,2,288,550,757,878,882,738,415,-118,-892 ],
				[ 424,-269,-694,-891,-900,-761,-514,-199,144,475,754,941,996,879,550,-31,-904 ],
				[ 748,-98,-643,-930,-1002,-902,-673,-358,0,358,673,902,1002,930,643,98,-748 ],
				[ 904,31,-550,-879,-996,-941,-754,-475,-144,199,514,761,900,891,694,269,-424 ],
				[ 892,118,-415,-738,-882,-878,-757,-550,-288,-2,277,518,690,762,703,482,68 ],
				[ 712,163,-238,-507,-660,-713,-682,-583,-432,-245,-38,173,372,543,670,737,728 ],
				[ 364,166,-19,-186,-330,-446,-529,-574,-576,-530,-431,-274,-54,234,595,1034,1556 ],
				[ -152,127,242,225,108,-77,-298,-523,-720,-857,-902,-823,-588,-165,478,1373,2552 ],
				[ -836,46,545,726,654,394,11,-430,-864,-1226,-1451,-1474,-1230,-654,319,1754,3716 ],
				[ -1688,-77,890,1317,1308,967,398,-295,-1008,-1637,-2078,-2227,-1980,-1233,118,2177,5048 ],
				[ -2708,-242,1277,1998,2070,1642,863,-118,-1152,-2090,-2783,-3082,-2838,-1902,-125,2642,6548 ] ]
	elif( points == 19 and n >= 19 ):
		wf = [ 1463,4389,74613,298452,74613,21318,10659,298452,6783,2261,6783,298452,10659,21318,74613,298452,74613,4389,1463 ]
		cf = [ [ 851,544,304,124,-3,-84,-126,-136,-121,-88,-44,4,49,84,102,96,59,-16,-136 ],
				[ 1632,1193,832,542,316,147,28,-48,-88,-99,-88,-62,-28,7,36,52,48,17,-48 ],
				[ 15504,14144,12601,10924,9162,7364,5579,3856,2244,792,-451,-1436,-2114,-2436,-2353,-1816,-776,816,3009 ],
				[ 25296,36856,43696,46439,45708,42126,36316,28901,20504,11748,3256,-4349,-10444,-14406,-15612,-13439,-7264,3536,19584 ],
				[ -153,5372,9162,11427,12377,12222,11172,9437,7227,4752,2222,-153,-2163,-3598,-4248,-3903,-2353,612,5202 ],
				[ -1224,714,2104,3009,3492,3616,3444,3039,2464,1782,1056,349,-276,-756,-1028,-1029,-696,34,1224 ],
				[ -918,68,797,1297,1596,1722,1703,1567,1342,1056,737,413,112,-138,-309,-373,-302,-68,357 ],
				[ -27744,-3264,15424,28901,37748,42546,43876,42319,38456,32868,26136,18841,11564,4886,-612,-4349,-5744,-4216,816 ],
				[ -561,-136,204,466,657,784,854,874,851,792,704,594,469,336,202,74,-41,-136,-204 ],
				[ -136,-51,24,89,144,189,224,249,264,269,264,249,224,189,144,89,24,-51,-136 ],
				[ -204,-136,-41,74,202,336,469,594,704,792,851,874,854,784,657,466,204,-136,-561 ],
				[ 816,-4216,-5744,-4349,-612,4886,11564,18841,26136,32868,38456,42319,43876,42546,37748,28901,15424,-3264,-27744 ],
				[ 357,-68,-302,-373,-309,-138,112,413,737,1056,1342,1567,1703,1722,1596,1297,797,68,-918 ],
				[ 1224,34,-696,-1029,-1028,-756,-276,349,1056,1782,2464,3039,3444,3616,3492,3009,2104,714,-1224 ],
				[ 5202,612,-2353,-3903,-4248,-3598,-2163,-153,2222,4752,7227,9437,11172,12222,12377,11427,9162,5372,-153 ],
				[ 19584,3536,-7264,-13439,-15612,-14406,-10444,-4349,3256,11748,20504,28901,36316,42126,45708,46439,43696,36856,25296 ],
				[ 3009,816,-776,-1816,-2353,-2436,-2114,-1436,-451,792,2244,3856,5579,7364,9162,10924,12601,14144,15504 ],
				[ -48,17,48,52,36,7,-28,-62,-88,-99,-88,-48,28,147,316,542,832,1193,1632 ],
				[ -136,-16,59,96,102,84,49,4,-44,-88,-121,-136,-126,-84,-3,124,304,544,851 ] ]
		wg = [ 81396,1790712,127908,1790712,895356,1790712,895356,162792,895356,255816,895356,162792,895356,1790712,895356,1790712,127908,1790712,81396 ]
		cg = [ [ -19074,-8908,-1366,3853,7050,8526,8582,7519,5638,3240,626,-1903,-4046,-5502,-5970,-5149,-2738,1564,8058 ],
				[ -333336,-162724,-35032,54577,110940,138894,143276,128923,100672,63360,21824,-19099,-54572,-79758,-89820,-79921,-45224,19108,117912 ],
				[ -18258,-9452,-2774,2009,5130,6822,7318,6851,5654,3960,2002,13,-1774,-3126,-3810,-3593,-2242,476,4794 ],
				[ -186456,-104788,-41464,5413,37740,57414,66332,66391,59488,47520,32384,15977,196,-13062,-21900,-24421,-18728,-2924,24888 ],
				[ -62934,-40052,-21458,-6781,4350,12306,17458,20177,20834,19800,17446,14143,10262,6174,2250,-1139,-3622,-4828,-4386 ],
				[ -73848,-58276,-43192,-28799,-15300,-2898,8204,17803,25696,31680,35552,37109,36148,32466,25860,16127,3064,-13532,-33864 ],
				[ -15198,-19652,-21146,-20149,-17130,-12558,-6902,-631,5786,11880,17182,21223,23534,23646,21090,15397,6098,-7276,-25194 ],
				[ 408,-2108,-3656,-4369,-4380,-3822,-2828,-1531,-64,1440,2848,4027,4844,5166,4860,3793,1832,-1156,-5304 ],
				[ 15402,-4964,-18482,-26041,-28530,-26838,-21854,-14467,-5566,3960,13222,21331,27398,30534,29850,24457,13466,-4012,-28866 ],
				[ 6936,68,-4648,-7481,-8700,-8574,-7372,-5363,-2816,0,2816,5363,7372,8574,8700,7481,4648,-68,-6936 ],
				[ 28866,4012,-13466,-24457,-29850,-30534,-27398,-21331,-13222,-3960,5566,14467,21854,26838,28530,26041,18482,4964,-15402 ],
				[ 5304,1156,-1832,-3793,-4860,-5166,-4844,-4027,-2848,-1440,64,1531,2828,3822,4380,4369,3656,2108,-408 ],
				[ 25194,7276,-6098,-15397,-21090,-23646,-23534,-21223,-17182,-11880,-5786,631,6902,12558,17130,20149,21146,19652,15198 ],
				[ 33864,13532,-3064,-16127,-25860,-32466,-36148,-37109,-35552,-31680,-25696,-17803,-8204,2898,15300,28799,43192,58276,73848 ],
				[ 4386,4828,3622,1139,-2250,-6174,-10262,-14143,-17446,-19800,-20834,-20177,-17458,-12306,-4350,6781,21458,40052,62934 ],
				[ -24888,2924,18728,24421,21900,13062,-196,-15977,-32384,-47520,-59488,-66391,-66332,-57414,-37740,-5413,41464,104788,186456 ],
				[ -4794,-476,2242,3593,3810,3126,1774,-13,-2002,-3960,-5654,-6851,-7318,-6822,-5130,-2009,2774,9452,18258 ],
				[ -117912,-19108,45224,79921,89820,79758,54572,19099,-21824,-63360,-100672,-128923,-143276,-138894,-110940,-54577,35032,162724,333336 ],
				[ -8058,-1564,2738,5149,5970,5502,4046,1903,-626,-3240,-5638,-7519,-8582,-8526,-7050,-3853,1366,8908,19074 ] ]
	elif( points == 21 and n >= 21 ):
		wf = [ 10626,5313,100947,302841,605682,302841,302841,302841,605682,33649,3059,33649,605682,302841,302841,302841,605682,302841,100947,5313,10626 ]
		cf = [ [ 5781,3876,2346,1156,271,-344,-724,-904,-919,-804,-594,-324,-29,256,496,656,701,596,306,-204,-969 ],
				[ 1938,1437,1020,680,410,203,52,-50,-110,-135,-132,-108,-70,-25,20,58,82,85,60,0,-102 ],
				[ 22287,19380,16593,13940,11435,9092,6925,4948,3175,1620,297,-780,-1597,-2140,-2395,-2348,-1985,-1292,-255,1140,2907 ],
				[ 32946,38760,41820,42469,41050,37906,33380,27815,21554,14940,8316,2025,-3590,-8186,-11420,-12949,-12430,-9520,-3876,4845,16986 ],
				[ 15447,46740,68610,82100,88253,88112,82720,73120,60355,45468,29502,13500,-1495,-14440,-24292,-30008,-30545,-24860,-11910,9348,39957 ],
				[ -9804,11571,27276,37906,44056,46321,45296,41576,35756,28431,20196,11646,3376,-4019,-9944,-13804,-15004,-12949,-7044,3306,18696 ],
				[ -20634,2964,20775,33380,41360,45296,45769,43360,38650,32220,24651,16524,8420,920,-5395,-9944,-12146,-11420,-7185,1140,14136 ],
				[ -25764,-2850,14844,27815,36560,41576,43360,42409,39220,34290,28116,21195,14024,7100,920,-4019,-7220,-8186,-6420,-1425,7296 ],
				[ -52383,-12540,19050,43108,60355,71512,77300,78440,75653,69660,61182,50940,39655,28048,16840,6752,-1495,-7180,-9582,-7980,-1653 ],
				[ -2546,-855,540,1660,2526,3159,3580,3810,3870,3781,3564,3240,2830,2355,1836,1294,750,225,-260,-684,-1026 ],
				[ -171,-76,9,84,149,204,249,284,309,324,329,324,309,284,249,204,149,84,9,-76,-171 ],
				[ -1026,-684,-260,225,750,1294,1836,2355,2830,3240,3564,3781,3870,3810,3580,3159,2526,1660,540,-855,-2546 ],
				[ -1653,-7980,-9582,-7180,-1495,6752,16840,28048,39655,50940,61182,69660,75653,78440,77300,71512,60355,43108,19050,-12540,-52383 ],
				[ 7296,-1425,-6420,-8186,-7220,-4019,920,7100,14024,21195,28116,34290,39220,42409,43360,41576,36560,27815,14844,-2850,-25764 ],
				[ 14136,1140,-7185,-11420,-12146,-9944,-5395,920,8420,16524,24651,32220,38650,43360,45769,45296,41360,33380,20775,2964,-20634 ],
				[ 18696,3306,-7044,-12949,-15004,-13804,-9944,-4019,3376,11646,20196,28431,35756,41576,45296,46321,44056,37906,27276,11571,-9804 ],
				[ 39957,9348,-11910,-24860,-30545,-30008,-24292,-14440,-1495,13500,29502,45468,60355,73120,82720,88112,88253,82100,68610,46740,15447 ],
				[ 16986,4845,-3876,-9520,-12430,-12949,-11420,-8186,-3590,2025,8316,14940,21554,27815,33380,37906,41050,42469,41820,38760,32946 ],
				[ 2907,1140,-255,-1292,-1985,-2348,-2395,-2140,-1597,-780,297,1620,3175,4948,6925,9092,11435,13940,16593,19380,22287 ],
				[ -102,0,60,85,82,58,20,-25,-70,-108,-132,-135,-110,-50,52,203,410,680,1020,1437,1938 ],
				[ -969,-204,306,596,701,656,496,256,-29,-324,-594,-804,-919,-904,-724,-344,271,1156,2346,3876,5781 ] ]
		wg = [ 3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092,1817046,3634092 ]
		cg = [ [ -719625,-373008,-106644,87664,218113,292900,320222,308276,265259,199368,118800,31752,-53579,-128996,-186302,-217300,-213793,-167584,-70476,85728,309225 ],
				[ -292695,-156579,-51288,26279,79223,110645,123646,121327,106789,83133,53460,20871,-11533,-40651,-63382,-76625,-77279,-62243,-28416,27303,108015 ],
				[ -463125,-258096,-98004,21568,105037,156820,181334,182996,166223,135432,95040,49464,3121,-39572,-74198,-96340,-101581,-85504,-43692,28272,134805 ],
				[ -176415,-103911,-46464,-2653,28943,49745,61174,64651,61597,53433,41580,27459,12491,-1903,-14302,-23285,-27431,-25319,-15528,3363,32775 ],
				[ -254505,-162336,-87348,-28064,16993,49300,70334,81572,84491,80568,71280,58104,42517,25996,10018,-3940,-14401,-19888,-18924,-10032,8265 ],
				[ -84075,-60819,-40632,-23353,-8821,3125,12646,19903,25057,28269,29700,29511,27863,24917,20834,15775,9901,3373,-3648,-11001,-18525 ],
				[ -93765,-85728,-74676,-61232,-46019,-29660,-12778,4004,20063,34776,47520,57672,64609,67708,66346,59900,47747,29264,3828,-29184,-70395 ],
				[ -15675,-27303,-33792,-35821,-34069,-29215,-21938,-12917,-2831,7641,17820,27027,34583,39809,42026,40555,34717,23833,7224,-15789,-45885 ],
				[ 19095,-28272,-59988,-77936,-83999,-80060,-68002,-49708,-27061,-1944,23760,48168,69397,85564,94786,95180,84863,61952,24564,-29184,-101175 ],
				[ 28785,-3363,-25944,-40057,-46801,-47275,-42578,-33809,-22067,-8451,5940,20007,32651,42773,49274,51055,47017,36061,17088,-11001,-49305 ],
				[ 84075,10032,-43284,-78176,-96947,-101900,-95338,-79564,-56881,-29592,0,29592,56881,79564,95338,101900,96947,78176,43284,-10032,-84075 ],
				[ 49305,11001,-17088,-36061,-47017,-51055,-49274,-42773,-32651,-20007,-5940,8451,22067,33809,42578,47275,46801,40057,25944,3363,-28785 ],
				[ 101175,29184,-24564,-61952,-84863,-95180,-94786,-85564,-69397,-48168,-23760,1944,27061,49708,68002,80060,83999,77936,59988,28272,-19095 ],
				[ 45885,15789,-7224,-23833,-34717,-40555,-42026,-39809,-34583,-27027,-17820,-7641,2831,12917,21938,29215,34069,35821,33792,27303,15675 ],
				[ 70395,29184,-3828,-29264,-47747,-59900,-66346,-67708,-64609,-57672,-47520,-34776,-20063,-4004,12778,29660,46019,61232,74676,85728,93765 ],
				[ 18525,11001,3648,-3373,-9901,-15775,-20834,-24917,-27863,-29511,-29700,-28269,-25057,-19903,-12646,-3125,8821,23353,40632,60819,84075 ],
				[ -8265,10032,18924,19888,14401,3940,-10018,-25996,-42517,-58104,-71280,-80568,-84491,-81572,-70334,-49300,-16993,28064,87348,162336,254505 ],
				[ -32775,-3363,15528,25319,27431,23285,14302,1903,-12491,-27459,-41580,-53433,-61597,-64651,-61174,-49745,-28943,2653,46464,103911,176415 ],
				[ -134805,-28272,43692,85504,101581,96340,74198,39572,-3121,-49464,-95040,-135432,-166223,-182996,-181334,-156820,-105037,-21568,98004,258096,463125 ],
				[ -108015,-27303,28416,62243,77279,76625,63382,40651,11533,-20871,-53460,-83133,-106789,-121327,-123646,-110645,-79223,-26279,51288,156579,292695 ],
				[ -309225,-85728,70476,167584,213793,217300,186302,128996,53579,-31752,-118800,-199368,-265259,-308276,-320222,-292900,-218113,-87664,106644,373008,719625 ] ]
	elif( n >= 5 ):
		wf = [ 70,35,35,35,70 ]
		cf = [ [ 69,4,-6,4,-1 ], [ 2,27,12,-8,2 ], [ -3,12,17,12,-3 ], [ 2,-8,12,27,2 ], [ -1,4,-6,4,69 ] ]
		wg = [ 84,42,12,42,84 ]
		cg = [ [ -125,136,48,-88,29 ], [ -19,-1,12,13,-5 ], [ 1,-8,0,8,-1 ], [ 5,-13,-12,1,19 ], [ -29,88,-48,-136,125 ] ]
	if( wf != None and cf != None ):
		f = []
		for i in range( m ):
			f.append( sum( [ ii * jj for ii,jj in zip( cf[i], y[0:points] ) ] ) / wf[i] )
		for i in range( m, n - m ):
			f.append( sum( [ ii * jj for ii,jj in zip( cf[m], y[i-m:i+m+1] ) ] ) / wf[m] )
		for i in range( m+1, 2*m+1 ):
			f.append( sum( [ ii * jj for ii,jj in zip( cf[i], y[-points:] ) ] ) / wf[i] )
	if( gradient and wg != None and cg != None ):
		dx = sum( [ x[i+1] - x[i] for i in range( n - 1 ) ] ) / float( n - 1 )
		g  = []
		for i in range( m ):
			f.append( sum( [ ii * jj for ii,jj in zip( cg[i], y[0:points] ) ] ) / ( wg[i] * dx ) )
		for i in range( m, n - m ):
			f.append( sum( [ ii * jj for ii,jj in zip( cg[m], y[i-m:i+m+1] ) ] ) / ( wg[m] * dx ) )
		for i in range( m+1, 2*m+1 ):
			f.append( sum( [ ii * jj for ii,jj in zip( cg[i], y[-points:] ) ] ) / ( wg[i] * dx ) )
	return( f, g )
