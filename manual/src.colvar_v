\normalsize
\subsection[\_colvar\_v]{\_colvar\_v.so}
This binary module (must be compiled, for performance...) allows to use the electrostatic potential
calculated on one atom (or a linear combination of potentials) as a colective variable (used with an umbrella sampling restraint).
There are two available classes: \func{coulomb} (performing basic Coulomb potential) and \func{fswitch} for a force-switched interaction.
The common parameters for the constructor are: the value of the umbrella constant (\parm{kmb}), the reference value of the potential (\parm{ref}),
a list of atoms where calculating the potential (\parm{atm\_lst}),
a list of atoms to interact with (\parm{nbn\_lst}),
the weights for the linear combination of potentials (\parm{wei\_lst}) and
an exlusion list (\parm{exc\_lst}, containing three-elemnts sub-lists of shape:
\textit{[ atm, nbn, scale\_factor ]}) in order to avoid direct interactions (1-4 and lower actually).
Both methods \func{get\_func} and \func{get\_grad} accept a molecule object as a parameter (\parm{mol}, using "mol.coor" and "mol.chrg"),
and resturn the value of the electrostatic potential.
The umbrella energy associated to the restraint is incorporated into the molecule object ("mol.func"), as well as the gradients  ("mol.grad").
\begin{pyglist}[language=python,fvset={frame=single}]
class coulomb( kmb, ref, atm_lst, nbn_lst, wei_lst, exc_lst )
    def get_func( mol )
    def get_grad( mol )

class fswitch( kmb, ref, con, cof, atm_lst, nbn_lst, wei_lst, exc_lst )
    def get_func( mol )
    def get_grad( mol )
\end{pyglist}

\footnotesize
\begin{pyglist}[language=python,fvset={frame=single}]
#SOURCE@../samples/test.colvar_v
\end{pyglist}
\begin{pyglist}[fvset={frame=single}]
#SOURCE@../samples/logs/test.colvar_v.log
\end{pyglist}
